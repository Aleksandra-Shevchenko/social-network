{"version":3,"sources":["utils/validation/validationFormSchema.js","components/Login/Login.module.css","components/Login/Login.js"],"names":["loginFormSchema","Yup","shape","email","required","password","min","profileFormSchema","fullName","max","aboutMe","lookingForAJobDescription","module","exports","connect","state","isAuth","auth","error","login","withRouter","className","style","login_box","initialValues","rememberMe","validationSchema","onSubmit","values","errors","touched","isValid","dirty","container","title","form","form_row","htmlFor","label","type","name","id","input","input_error","component","form_checkbox","checkbox","btn","btn_disabled","disabled","server_errorContainer","server_error"],"mappings":"wHAAA,iFAEaA,EAAkBC,MAAaC,MAAM,CAChDC,MAAOF,MAAaE,QAAQC,SAAS,qBACrCC,SAAUJ,MACPG,SAAS,wBACTE,IAAI,EAAG,mDAGCC,EAAoBN,MAAaC,MAAM,CAClDM,SAAUP,MACPG,SAAS,oBACTE,IAAI,EAAG,6CACPG,IAAI,GAAI,6CACXC,QAAST,MACTU,0BAA2BV,S,oBCd7BW,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,yBAAyB,MAAQ,qBAAqB,KAAO,oBAAoB,SAAW,wBAAwB,cAAgB,6BAA6B,MAAQ,qBAAqB,MAAQ,qBAAqB,SAAW,wBAAwB,YAAc,2BAA2B,MAAQ,qBAAqB,sBAAwB,qCAAqC,aAAe,4BAA4B,IAAM,mBAAmB,aAAe,8B,iCCDvhB,6EAsFeC,uBAPS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,OACnBE,MAAOH,EAAME,KAAKC,SAIkB,CAACC,WAA1BL,CAAkCM,aA9EjD,YAAkC,IAAjBD,EAAgB,EAAhBA,MAAOD,EAAS,EAATA,MAMtB,OACE,qBAAKG,UAAWC,IAAMC,UAAtB,SACE,cAAC,IAAD,CACEC,cAAe,CACbrB,MAAO,GACPE,SAAU,GACVoB,YAAY,GAEdC,iBAAkB1B,IAClB2B,SAbe,SAACC,GACpBT,EAAMS,IAKJ,SAUG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,MAA7B,OACC,sBAAKX,UAAWC,IAAMW,UAAtB,UACE,oBAAIZ,UAAWC,IAAMY,MAArB,iCACA,eAAC,IAAD,CAAMb,UAAWC,IAAMa,KAAvB,UACE,sBAAKd,UAAWC,IAAMc,SAAtB,UACE,uBAAOC,QAAQ,QAAQhB,UAAWC,IAAMgB,MAAxC,mBACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQC,GAAG,QAClCpB,UAAS,gCACLC,IAAMoB,MADD,iCAELb,EAAO1B,OAAS2B,EAAQ3B,MAAQmB,IAAMqB,YAAc,KAF/C,0BAKX,cAAC,IAAD,CAAcH,KAAK,QAAQI,UAAU,OAAOvB,UAAWC,IAAMJ,WAG/D,sBAAKG,UAAWC,IAAMc,SAAtB,UACE,uBAAOC,QAAQ,WAAWhB,UAAWC,IAAMgB,MAA3C,sBACA,cAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWC,GAAG,WACxCpB,UAAS,gCACLC,IAAMoB,MADD,iCAELb,EAAOxB,UAAYyB,EAAQzB,SAAWiB,IAAMqB,YAAc,KAFrD,0BAKX,cAAC,IAAD,CAAcH,KAAK,WAAWI,UAAU,OAAOvB,UAAWC,IAAMJ,WAGlE,sBAAKG,UAAWC,IAAMuB,cAAtB,UACE,uBAAOR,QAAQ,aAAahB,UAAWC,IAAMgB,MAA7C,yBACA,cAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,aAAaC,GAAG,aAAapB,UAAWC,IAAMwB,cAG5E,wBAAQP,KAAK,SACXlB,UAAS,UAAKC,IAAMyB,IAAX,YAAoBf,GAASD,EAAgC,GAArBT,IAAM0B,cACvDC,WAAYjB,GAASD,GAFvB,qBAMCb,EACC,sBAAKG,UAAWC,IAAM4B,sBAAtB,UACE,mBAAG7B,UAAWC,IAAM6B,aAApB,8BACA,mBAAG9B,UAAWC,IAAM6B,aAApB,SAAmCjC,OAEnC","file":"static/js/9.ea406b6b.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\n\r\nexport const loginFormSchema = Yup.object().shape({\r\n  email: Yup.string().email().required(\"Email is required\"),\r\n  password: Yup.string()\r\n    .required(\"Password is required\")\r\n    .min(4, \"Password is too short - should be 4 chars min\")\r\n});\r\n\r\nexport const profileFormSchema = Yup.object().shape({\r\n  fullName: Yup.string()\r\n    .required(\"Name is required\")\r\n    .min(2, \"Name is too short - should be 2 chars min\")\r\n    .max(40, \"Name is too long - should be 40 chars max\"),\r\n  aboutMe: Yup.string(),\r\n  lookingForAJobDescription: Yup.string(),\r\n});\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_box\":\"Login_login_box__Y6NMk\",\"container\":\"Login_container__1gh3E\",\"title\":\"Login_title__2gOxU\",\"form\":\"Login_form__1oI7F\",\"form_row\":\"Login_form_row__3t5Xl\",\"form_checkbox\":\"Login_form_checkbox__2jxsT\",\"label\":\"Login_label__68JtG\",\"input\":\"Login_input__2Xz_f\",\"checkbox\":\"Login_checkbox__2nHAi\",\"input_error\":\"Login_input_error__3D39Z\",\"error\":\"Login_error__25IZ_\",\"server_errorContainer\":\"Login_server_errorContainer__3Hk2W\",\"server_error\":\"Login_server_error__1upWp\",\"btn\":\"Login_btn__avbxQ\",\"btn_disabled\":\"Login_btn_disabled__1LDYR\"};","import { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { loginFormSchema } from \"../../utils/validation/validationFormSchema\";\r\nimport {login} from '../../redux/authReducer';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router\";\r\nimport style from './Login.module.css';\r\n\r\n\r\nfunction Login({ login, error }) {\r\n\r\n  const handleSubmit = (values) => {\r\n    login(values);\r\n  };\r\n\r\n  return (\r\n    <div className={style.login_box}>\r\n      <Formik\r\n        initialValues={{ \r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: false \r\n        }}\r\n        validationSchema={loginFormSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n\r\n        {({ errors, touched, isValid, dirty }) => (\r\n          <div className={style.container}>\r\n            <h1 className={style.title}>Sign in to continue</h1>\r\n            <Form className={style.form}>\r\n              <div className={style.form_row}>\r\n                <label htmlFor=\"email\" className={style.label}>Email</label>\r\n                <Field type=\"email\" name=\"email\" id=\"email\"\r\n                  className={`\r\n                    ${style.input}\r\n                    ${errors.email && touched.email ? style.input_error : null}\r\n                  `}\r\n                />\r\n                <ErrorMessage name=\"email\" component=\"span\" className={style.error} />\r\n              </div>\r\n              \r\n              <div className={style.form_row}>\r\n                <label htmlFor=\"password\" className={style.label}>Password</label>\r\n                <Field type=\"password\" name=\"password\" id=\"password\"\r\n                  className={`\r\n                    ${style.input}\r\n                    ${errors.password && touched.password ? style.input_error : null}\r\n                  `}\r\n                />\r\n                <ErrorMessage name=\"password\" component=\"span\" className={style.error}/>\r\n              </div>\r\n              \r\n              <div className={style.form_checkbox}>\r\n                <label htmlFor=\"rememberMe\" className={style.label}>Remember me</label>\r\n                <Field type=\"checkbox\" name=\"rememberMe\" id=\"rememberMe\" className={style.checkbox}/>\r\n              </div>\r\n\r\n              <button type=\"submit\"\r\n                className={`${style.btn} ${!(dirty && isValid) ? style.btn_disabled : \"\"}`}\r\n                disabled={!(dirty && isValid)}\r\n              >\r\n                Sign in\r\n              </button>\r\n              {error ? (\r\n                <div className={style.server_errorContainer}>\r\n                  <p className={style.server_error}>{`Something wrong!`}</p>\r\n                  <p className={style.server_error}>{error}</p>\r\n                </div>\r\n              ) : null}\r\n            </Form>\r\n          </div>\r\n        )}\r\n\r\n      </Formik>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    error: state.auth.error,\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, {login})(withRouter(Login));"],"sourceRoot":""}