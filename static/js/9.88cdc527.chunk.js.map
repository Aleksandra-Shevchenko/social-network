{"version":3,"sources":["utils/validation/validationFormSchema.js","components/Login/Login.module.css","components/Login/Login.js"],"names":["errorUrl","loginFormSchema","Yup","shape","email","required","password","min","captcha","profileFormSchema","fullName","max","aboutMe","lookingForAJobDescription","contacts","facebook","url","github","instagram","mainLink","twitter","vk","website","youtube","module","exports","connect","state","isAuth","auth","error","captchaUrl","login","setError","withRouter","React","useEffect","className","style","login_box","initialValues","rememberMe","validationSchema","onSubmit","values","resetForm","setSubmitting","then","res","catch","errors","touched","isValid","dirty","isSubmitting","container","title","form","form_row","htmlFor","label","type","name","id","input","input_error","component","form_checkbox","checkbox","title_captcha","captcha_box","src","alt","captcha_pic","label_empty","captcha_input","btn","btn_disabled","disabled","server_errorContainer","server_error"],"mappings":"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","file":"static/js/9.88cdc527.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst errorUrl = \"This address is invalid. The field must contain URL\";\r\n\r\nexport const loginFormSchema = Yup.object().shape({\r\n  email: Yup.string().email().required(\"Email is required\"),\r\n  password: Yup.string()\r\n    .required(\"Password is required\")\r\n    .min(4, \"Password is too short - should be 4 chars min\"),\r\n  captcha: Yup.string(),\r\n});\r\n\r\nexport const profileFormSchema = Yup.object().shape({\r\n  fullName: Yup.string()\r\n    .required(\"Name is required\")\r\n    .min(2, \"Name is too short - should be 2 chars min\")\r\n    .max(40, \"Name is too long - should be 40 chars max\"),\r\n  aboutMe: Yup.string(),\r\n  lookingForAJobDescription: Yup.string(),\r\n  contacts: Yup.object().shape({\r\n    facebook: Yup.string().url(errorUrl),\r\n    github: Yup.string().url(errorUrl),\r\n    instagram: Yup.string().url(errorUrl),\r\n    mainLink: Yup.string().url(errorUrl),\r\n    twitter: Yup.string().url(errorUrl),\r\n    vk: Yup.string().url(errorUrl),\r\n    website: Yup.string().url(errorUrl),\r\n    youtube: Yup.string().url(errorUrl),\r\n  }),\r\n});\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_box\":\"Login_login_box__Y6NMk\",\"container\":\"Login_container__1gh3E\",\"title\":\"Login_title__2gOxU\",\"form\":\"Login_form__1oI7F\",\"form_row\":\"Login_form_row__3t5Xl\",\"form_checkbox\":\"Login_form_checkbox__2jxsT\",\"label\":\"Login_label__68JtG\",\"label_empty\":\"Login_label_empty__8sW7n\",\"input\":\"Login_input__2Xz_f\",\"checkbox\":\"Login_checkbox__2nHAi\",\"input_error\":\"Login_input_error__3D39Z\",\"error\":\"Login_error__25IZ_\",\"server_errorContainer\":\"Login_server_errorContainer__3Hk2W\",\"server_error\":\"Login_server_error__1upWp\",\"btn\":\"Login_btn__avbxQ\",\"btn_disabled\":\"Login_btn_disabled__1LDYR\",\"title_captcha\":\"Login_title_captcha__2yiE1\",\"captcha_input\":\"Login_captcha_input__1Yo2k\",\"captcha_box\":\"Login_captcha_box__12ZpN\",\"captcha_pic\":\"Login_captcha_pic__2WgmP\"};","import { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { loginFormSchema } from \"../../utils/validation/validationFormSchema\";\r\nimport {login, setError} from '../../redux/authReducer';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router\";\r\nimport style from './Login.module.css';\r\nimport React from 'react';\r\n\r\n\r\nfunction Login({ login, error, captchaUrl, setError }) {\r\n\r\n  React.useEffect(() => {\r\n    setError('');\r\n  }, [])\r\n\r\n  const handleSubmit = (values, { resetForm, setSubmitting }) => {\r\n    login(values)\r\n      .then((res) => {\r\n        if (res) resetForm();\r\n        setSubmitting(false);\r\n      })\r\n      .catch(() => {\r\n        setSubmitting(false);\r\n      })\r\n  };\r\n\r\n  return (\r\n    <div className={style.login_box}>\r\n      <Formik\r\n        initialValues={{ \r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: false,\r\n          captcha: \"\",\r\n        }}\r\n        validationSchema={loginFormSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n\r\n        {({ errors, touched, isValid, dirty, isSubmitting }) => (\r\n          <div className={style.container}>\r\n            <h1 className={style.title}>Sign in to continue</h1>\r\n            <Form className={style.form}>\r\n              <div className={style.form_row}>\r\n                <label htmlFor=\"email\" className={style.label}>Email</label>\r\n                <Field\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"email\"\r\n                  className={`\r\n                    ${style.input}\r\n                    ${errors.email && touched.email ? style.input_error : null}\r\n                  `}\r\n                />\r\n                <ErrorMessage name=\"email\" component=\"span\" className={style.error} />\r\n              </div>\r\n              \r\n              <div className={style.form_row}>\r\n                <label htmlFor=\"password\" className={style.label}>Password</label>\r\n                <Field\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  className={`\r\n                    ${style.input}\r\n                    ${errors.password && touched.password ? style.input_error : null}\r\n                  `}\r\n                />\r\n                <ErrorMessage name=\"password\" component=\"span\" className={style.error}/>\r\n              </div>\r\n              \r\n              <div className={style.form_checkbox}>\r\n                <label htmlFor=\"rememberMe\" className={style.label}>Remember me</label>\r\n                <Field type=\"checkbox\" name=\"rememberMe\" id=\"rememberMe\" className={style.checkbox}/>\r\n              </div>\r\n\r\n\r\n              {captchaUrl && (\r\n                <>\r\n                  <h3 className={style.title_captcha}>Please enter the characters as they are shown in the image</h3>\r\n                  <div className={style.captcha_box}>\r\n                    <img src={captchaUrl} alt='captcha' className={style.captcha_pic}/>\r\n                    <div className={style.form_row}>\r\n                      <label htmlFor=\"captcha\" className={`${style.label} ${style.label_empty}`}></label>\r\n                      <Field\r\n                        type=\"text\"\r\n                        name=\"captcha\"\r\n                        id=\"captcha\"\r\n                        className={`\r\n                          ${style.input}\r\n                          ${style.captcha_input}\r\n                          ${errors.captcha && touched.captcha ? style.input_error : null}\r\n                        `}\r\n                      />\r\n                      <ErrorMessage name=\"captcha\" component=\"span\" className={style.error}/>\r\n                    </div>\r\n                  </div>\r\n                </>)\r\n              }\r\n\r\n              <button type=\"submit\"\r\n                className={`${style.btn} ${!(dirty && isValid) || isSubmitting ? style.btn_disabled : \"\"}`}\r\n                disabled={!(dirty && isValid) || isSubmitting}\r\n              >\r\n                Sign in\r\n              </button>\r\n\r\n              {error ? (\r\n                <div className={style.server_errorContainer}>\r\n                  <p className={style.server_error}>{`Something wrong!`}</p>\r\n                  <p className={style.server_error}>{error}</p>\r\n                </div>\r\n              ) : null}\r\n            </Form>\r\n          </div>\r\n        )}\r\n\r\n      </Formik>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    error: state.auth.error,\r\n    captchaUrl: state.auth.captchaUrl,\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, {login, setError})(withRouter(Login));"],"sourceRoot":""}